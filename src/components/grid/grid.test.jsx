import { render, screen, fireEvent } from '@testing-library/react'
import { it, describe, expect } from 'vitest'
import React from 'react'
import Grid from './grid'

describe('Test if the whole app renders correctly', () => {
  it('Testing app, if it shows a value of all numbers', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn6 = screen.getByTestId('6')
    const btn7 = screen.getByTestId('7')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn6)
    fireEvent.click(btn7)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    expect(display).toBeInTheDocument()
    // console.log(display.textContent)
    expect(display.textContent).toBe('123456789')
    screen.debug()
  })
  it('Testing app, if it erases if I do an op', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    const btn0 = screen.getByTestId('0')
    const sum = screen.getByTestId('+')
    const rest = screen.getByTestId('-')
    const mul = screen.getByTestId('*')
    const div = screen.getByTestId('/')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    fireEvent.click(sum)
    expect(display.textContent).toBe('+')
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    expect(display.textContent).toBe('89')
    fireEvent.click(rest)
    expect(display.textContent).toBe('-')
    fireEvent.click(btn8)
    expect(display.textContent).toBe('8')
    fireEvent.click(mul)
    expect(display.textContent).toBe('*')
    fireEvent.click(btn2)
    expect(display.textContent).toBe('2')
    fireEvent.click(div)
    expect(display.textContent).toBe('/')
    fireEvent.click(btn5)
    fireEvent.click(btn0)
    expect(display.textContent).toBe('50')
    screen.debug()
  })
  it('Testing app, sum', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    const btn0 = screen.getByTestId('0')
    const sum = screen.getByTestId('+')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    fireEvent.click(sum)
    expect(display.textContent).toBe('+')
    fireEvent.click(btn8)
    fireEvent.click(btn0)
    fireEvent.click(equal)
    expect(display.textContent).toBe('1234669')
  })
  it('Testing app, rest', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    const btn0 = screen.getByTestId('0')
    const rest = screen.getByTestId('-')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    fireEvent.click(rest)
    expect(display.textContent).toBe('-')
    fireEvent.click(btn8)
    fireEvent.click(btn0)
    fireEvent.click(equal)
    expect(display.textContent).toBe('1234509')
  })
  it('Testing app, mult', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    const mult = screen.getByTestId('*')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    fireEvent.click(mult)
    expect(display.textContent).toBe('*')
    fireEvent.click(btn8)
    fireEvent.click(equal)
    expect(display.textContent).toBe('9876712')
  })
  it('Testing app, div', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn6 = screen.getByTestId('6')
    const btn4 = screen.getByTestId('4')
    const btn8 = screen.getByTestId('8')
    const div = screen.getByTestId('/')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(div)
    expect(display.textContent).toBe('/')
    fireEvent.click(btn8)
    fireEvent.click(equal)
    expect(display.textContent).toBe('8')
  })
  it('Testing app, more than 9 numbers', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn6 = screen.getByTestId('6')
    const btn4 = screen.getByTestId('4')
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    expect(display.textContent).toBe('646464646')
  })
  it('Testing app, division with more than 9 num', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn2 = screen.getByTestId('2')
    const btn7 = screen.getByTestId('7')
    const div = screen.getByTestId('/')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn2)
    fireEvent.click(btn2)
    fireEvent.click(div)
    fireEvent.click(btn7)
    fireEvent.click(equal)
    expect(display.textContent).toBe('3.1428571')
  })
  it('Testing app, more than 9 numbers with dot', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn6 = screen.getByTestId('6')
    const btn4 = screen.getByTestId('4')
    const dot = screen.getByTestId('.')
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(dot)
    fireEvent.click(btn4)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    expect(display.textContent).toBe('64.446464')
  })
  it('Testing app, negative', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn6 = screen.getByTestId('6')
    const btn4 = screen.getByTestId('4')
    const rest = screen.getByTestId('-')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(rest)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(equal)
    expect(display.textContent).toBe('ERROR')
  })
  it('Testing app, bigger than 999999999', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn6 = screen.getByTestId('6')
    const btn4 = screen.getByTestId('4')
    const mult = screen.getByTestId('*')
    const equal = screen.getByTestId('=')
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(mult)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(btn6)
    fireEvent.click(btn4)
    fireEvent.click(equal)
    expect(display.textContent).toBe('ERROR')
  })
  it('Testing app, if it erases if I do an op', () => {
    render(<Grid />)
    const display = screen.getByPlaceholderText('0')
    const btn1 = screen.getByTestId('1')
    const btn2 = screen.getByTestId('2')
    const btn3 = screen.getByTestId('3')
    const btn4 = screen.getByTestId('4')
    const btn5 = screen.getByTestId('5')
    const btn8 = screen.getByTestId('8')
    const btn9 = screen.getByTestId('9')
    const btn0 = screen.getByTestId('0')
    const sum = screen.getByTestId('+')
    const rest = screen.getByTestId('-')
    const mul = screen.getByTestId('*')
    const div = screen.getByTestId('/')
    const erase = screen.getByTestId('C')
    fireEvent.click(btn1)
    fireEvent.click(btn2)
    fireEvent.click(btn3)
    fireEvent.click(btn4)
    fireEvent.click(btn5)
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    fireEvent.click(sum)
    expect(display.textContent).toBe('+')
    fireEvent.click(btn8)
    fireEvent.click(btn9)
    expect(display.textContent).toBe('89')
    fireEvent.click(rest)
    expect(display.textContent).toBe('-')
    fireEvent.click(btn8)
    expect(display.textContent).toBe('8')
    fireEvent.click(mul)
    expect(display.textContent).toBe('*')
    fireEvent.click(btn2)
    expect(display.textContent).toBe('2')
    fireEvent.click(div)
    expect(display.textContent).toBe('/')
    fireEvent.click(btn5)
    fireEvent.click(btn0)
    expect(display.textContent).toBe('50')
    fireEvent.click(erase)
    expect(display.textContent).toBe('')
    screen.debug()
  })
})
